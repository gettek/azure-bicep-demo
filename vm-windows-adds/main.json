{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.255.40792",
      "templateHash": "3692970565891085359"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "bctst"
    },
    "suffix": {
      "type": "string",
      "defaultValue": "adds"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "secretExpiry": {
      "type": "int",
      "defaultValue": 1652448713
    },
    "publicIpDnsLabel": {
      "type": "string",
      "defaultValue": "ipbctst"
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "virtualNetworkSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24"
    },
    "virtualMachineCount": {
      "type": "int",
      "defaultValue": 2
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v3",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_B2ms"
      ]
    },
    "operatingSystem": {
      "type": "string",
      "defaultValue": "Server2019",
      "allowedValues": [
        "Server2012R2",
        "Server2016",
        "Server2019"
      ]
    },
    "virtualMachineAdminUsername": {
      "type": "string",
      "defaultValue": "nomen.nescio"
    },
    "virtualMachineAdminPassword": {
      "type": "secureString",
      "defaultValue": "$$EZN9voKC0y*R*RVO"
    },
    "domainName": {
      "type": "string",
      "defaultValue": "addstst.com"
    },
    "domainNetBiosName": {
      "type": "string",
      "defaultValue": "ADDSTST"
    },
    "addsDsrmPassword": {
      "type": "secureString",
      "defaultValue": "j9$ZRM13oZmxl7YksQ"
    },
    "virtualMachineExtensionCustomScriptEncoded": {
      "type": "secureString",
      "defaultValue": "W0NtZGxldEJpbmRpbmcoKV0NClBhcmFtICgNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldJERvbWFpbk5hbWUsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXSREb21haW5OZXRiaW9zTmFtZSwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldJERTUk0sDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV0kREMxSm9pblVzZXIsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV0kREMxSm9pblBhc3MNCikNCnRyeSB7DQogICAgIyBTeXNjb25maWcNCiAgICAoR2V0LVdtaU9iamVjdCAtY2xhc3MgIldpbjMyX1RTR2VuZXJhbFNldHRpbmciIC1OYW1lc3BhY2Ugcm9vdFxjaW12Mlx0ZXJtaW5hbHNlcnZpY2VzIC1Db21wdXRlck5hbWUgJGVudjpDT01QVVRFUk5BTUUgLUZpbHRlciAiVGVybWluYWxOYW1lPSdSRFAtdGNwJyIpLlNldFVzZXJBdXRoZW50aWNhdGlvblJlcXVpcmVkKDApDQogICAgJHNpemUgPSAoR2V0LVBhcnRpdGlvblN1cHBvcnRlZFNpemUgLURyaXZlTGV0dGVyICJDIik7UmVzaXplLVBhcnRpdGlvbiAtRHJpdmVMZXR0ZXIgIkMiIC1TaXplICRzaXplLlNpemVNYXggLUFzSm9iDQoNCiAgICAjIEluaXRpYWwgREMgRm9yZXN0DQogICAgaWYgKCRlbnY6Q09NUFVURVJOQU1FIC1saWtlICIqYWRkczAiIC1vciAkZW52OkNPTVBVVEVSTkFNRSAtbGlrZSAiKmFkZHMxIikgew0KICAgICAgICBXcml0ZS1PdXRwdXQgIlNldHRpbmcgdXAgQUREUyBGb3Jlc3QgJERvbWFpbk5hbWUiIHwgT3V0LUZpbGUgLUZpbGVQYXRoIHNldHVwLmxvZyAtQXBwZW5kDQogICAgICAgIEluc3RhbGwtV2luZG93c0ZlYXR1cmUgLU5hbWUgQUQtRG9tYWluLVNlcnZpY2VzIC1JbmNsdWRlTWFuYWdlbWVudFRvb2xzDQogICAgICAgIEltcG9ydC1Nb2R1bGUgQUREU0RlcGxveW1lbnQNCiAgICAgICAgSW5zdGFsbC1BRERTRm9yZXN0IGANCiAgICAgICAgICAgIC1Eb21haW5OYW1lICREb21haW5OYW1lIGANCiAgICAgICAgICAgIC1Eb21haW5OZXRiaW9zTmFtZSAkRG9tYWluTmV0Ymlvc05hbWUgYA0KICAgICAgICAgICAgLURvbWFpbk1vZGUgIldpblRocmVzaG9sZCIgYA0KICAgICAgICAgICAgLUZvcmVzdE1vZGUgIldpblRocmVzaG9sZCIgYA0KICAgICAgICAgICAgLUluc3RhbGxEbnMgYA0KICAgICAgICAgICAgLURhdGFiYXNlUGF0aCAiQzpcV2luZG93c1xOVERTIiBgDQogICAgICAgICAgICAtTG9nUGF0aCAiQzpcV2luZG93c1xOVERTIiBgDQogICAgICAgICAgICAtU3lzdm9sUGF0aCAiQzpcV2luZG93c1xTWVNWT0wiIGANCiAgICAgICAgICAgIC1TYWZlTW9kZUFkbWluaXN0cmF0b3JQYXNzd29yZCAoQ29udmVydFRvLVNlY3VyZVN0cmluZyAkRFNSTSAtQXNQbGFpblRleHQgLUZvcmNlKSBgDQogICAgICAgICAgICAtTm9SZWJvb3RPbkNvbXBsZXRpb24gYA0KICAgICAgICAgICAgLUZvcmNlDQogICAgICAgIFdyaXRlLU91dHB1dCAiU3VjY2Vzc2Z1bGx5IFByb21vdGVkIGFzIGEgUHJpbWFyeSBEQyIgfCBPdXQtRmlsZSAtRmlsZVBhdGggc2V0dXAubG9nIC1BcHBlbmQNCiAgICB9DQogICAgIyBTZWNvbmQgREMNCiAgICBlbHNlIHsNCiAgICAgICAgU3RhcnQtU2xlZXAgNjAwICMgd2FpdCBwcmltYXJ5IGRjIHJlYm9vdA0KICAgICAgICBXcml0ZS1PdXRwdXQgIlNldHRpbmcgdXAgQUREUyBTZWNvbmRhcnkgQ29udHJvbGxlciAkRG9tYWluTmFtZSIgfCBPdXQtRmlsZSAtRmlsZVBhdGggc2V0dXAubG9nIC1BcHBlbmQNCiAgICAgICAgJGNyZWRPYmplY3QgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsICgiJERDMUpvaW5Vc2VyQCREb21haW5OYW1lIiwgKENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJERDMUpvaW5QYXNzIC1Bc1BsYWluVGV4dCAtRm9yY2UpKQ0KICAgICAgICBJbnN0YWxsLVdpbmRvd3NGZWF0dXJlIC1OYW1lIEFELURvbWFpbi1TZXJ2aWNlcyAtSW5jbHVkZU1hbmFnZW1lbnRUb29scw0KICAgICAgICBJbXBvcnQtTW9kdWxlIEFERFNEZXBsb3ltZW50DQogICAgICAgIEluc3RhbGwtQUREU0RvbWFpbkNvbnRyb2xsZXIgYA0KICAgICAgICAgICAgLURvbWFpbk5hbWUgJERvbWFpbk5hbWUgYA0KICAgICAgICAgICAgLUluc3RhbGxEbnMgYA0KICAgICAgICAgICAgLURhdGFiYXNlUGF0aCAiQzpcV2luZG93c1xOVERTIiBgDQogICAgICAgICAgICAtTG9nUGF0aCAiQzpcV2luZG93c1xOVERTIiBgDQogICAgICAgICAgICAtU3lzdm9sUGF0aCAiQzpcV2luZG93c1xTWVNWT0wiIGANCiAgICAgICAgICAgIC1DcmVkZW50aWFsICRjcmVkT2JqZWN0IGANCiAgICAgICAgICAgIC1TYWZlTW9kZUFkbWluaXN0cmF0b3JQYXNzd29yZCAoQ29udmVydFRvLVNlY3VyZVN0cmluZyAkRFNSTSAtQXNQbGFpblRleHQgLUZvcmNlKSBgDQogICAgICAgICAgICAtRm9yY2UNCiAgICAgICAgV3JpdGUtT3V0cHV0ICJTdWNjZXNzZnVsbHkgUHJvbW90ZWQgYXMgYSBTZWNvbmRhcnkgREMiIHwgT3V0LUZpbGUgLUZpbGVQYXRoIHNldHVwLmxvZyAtQXBwZW5kDQogICAgfQ0KICAgIFdyaXRlLU91dHB1dCAiU2VydmVyIHdpbGwgcmVzdGFydCIgfCBPdXQtRmlsZSAtRmlsZVBhdGggc2V0dXAubG9nIC1BcHBlbmQNCiAgICBSZXN0YXJ0LUNvbXB1dGVyIC1Db25maXJtOiRmYWxzZQ0KfQ0KY2F0Y2ggew0KICAgICMgZ2V0IGEgZ2VuZXJpYyBlcnJvciByZWNvcmQNCiAgICBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5FcnJvclJlY29yZF0kZSA9ICRfDQoNCiAgICAjIHJldHJpZXZlIGluZm9ybWF0aW9uIGFib3V0IHJ1bnRpbWUgZXJyb3INCiAgICAkaW5mbyA9IFtQU0N1c3RvbU9iamVjdF1Aew0KICAgICAgICBFeGNlcHRpb24gPSAkZS5FeGNlcHRpb24uTWVzc2FnZQ0KICAgICAgICBSZWFzb24gICAgPSAkZS5DYXRlZ29yeUluZm8uUmVhc29uDQogICAgICAgIFRhcmdldCAgICA9ICRlLkNhdGVnb3J5SW5mby5UYXJnZXROYW1lDQogICAgICAgIFNjcmlwdCAgICA9ICRlLkludm9jYXRpb25JbmZvLlNjcmlwdE5hbWUNCiAgICAgICAgTGluZSAgICAgID0gJGUuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlcg0KICAgICAgICBDb2x1bW4gICAgPSAkZS5JbnZvY2F0aW9uSW5mby5PZmZzZXRJbkxpbmUNCiAgICB9DQogICAgI1dyaXRlIHRoZSBlcnJvciBvYmplY3QNCiAgICAkaW5mbyB8IE91dC1GaWxlIC1GaWxlUGF0aCBzZXR1cC5sb2cgLUFwcGVuZCAtTm9DbG9iYmVyDQogICAgZXhpdCA5OQ0KfQ0KZXhpdCAw"
    }
  },
  "functions": [],
  "variables": {
    "operatingSystemValues": {
      "Server2012R2": {
        "PublisherValue": "MicrosoftWindowsServer",
        "OfferValue": "WindowsServer",
        "SkuValue": "2012-R2-Datacenter"
      },
      "Server2016": {
        "PublisherValue": "MicrosoftWindowsServer",
        "OfferValue": "WindowsServer",
        "SkuValue": "2016-Datacenter"
      },
      "Server2019": {
        "PublisherValue": "MicrosoftWindowsServer",
        "OfferValue": "WindowsServer",
        "SkuValue": "2019-Datacenter"
      }
    },
    "metadata": {
      "longName": "[format('{{0}}-{0}-{1}', parameters('name'), if(equals(coalesce(parameters('suffix'), ''), ''), '', parameters('suffix')))]",
      "shortName": "[format('{{0}}{0}{1}', replace(parameters('name'), '-', ''), if(equals(coalesce(parameters('suffix'), ''), ''), '', parameters('suffix')))]"
    },
    "keyVault": {
      "name": "[replace(variables('metadata').shortName, '{0}', 'kv')]",
      "location": "[parameters('location')]"
    },
    "storageAccount": {
      "name": "[replace(variables('metadata').shortName, '{0}', 'sa')]",
      "location": "[parameters('location')]"
    },
    "networkSecurityGroup": {
      "name": "[replace(variables('metadata').longName, '{0}', 'nsg')]",
      "location": "[parameters('location')]",
      "securityRules": [
        {
          "name": "default-allow-3389",
          "properties": {
            "priority": 1000,
            "access": "Allow",
            "direction": "Inbound",
            "protocol": "TCP",
            "sourcePortRange": "*",
            "sourceAddressPrefix": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": 3389
          }
        }
      ]
    },
    "subnetName": "default",
    "virtualNetwork": {
      "name": "[replace(variables('metadata').longName, '{0}', 'vnet')]",
      "location": "[parameters('location')]",
      "addressPrefixes": [
        "[parameters('virtualNetworkAddressPrefix')]"
      ]
    },
    "publicIp": {
      "name": "[replace(variables('metadata').longName, '{0}', 'pip')]",
      "location": "[parameters('location')]"
    },
    "networkInterface": {
      "name": "[replace(variables('metadata').longName, '{0}', 'nic')]",
      "location": "[parameters('location')]"
    },
    "virtualMachine": {
      "name": "[replace(variables('metadata').shortName, '{0}', 'vm')]",
      "location": "[parameters('location')]",
      "vmSize": "[parameters('virtualMachineSize')]",
      "vmComputerName": "[replace(variables('metadata').shortName, '{0}', 'vm')]",
      "vmAdminUsername": "[parameters('virtualMachineAdminUsername')]",
      "vmAdminPassword": "[parameters('virtualMachineAdminPassword')]",
      "vmAdminPasswordKeyVaultSecretExpiry": "[parameters('secretExpiry')]",
      "vmImagePublisher": "[variables('operatingSystemValues')[parameters('operatingSystem')].PublisherValue]",
      "vmImageOffer": "[variables('operatingSystemValues')[parameters('operatingSystem')].OfferValue]",
      "vmImageSku": "[variables('operatingSystemValues')[parameters('operatingSystem')].SkuValue]",
      "vmOSDiskName": "[replace(variables('metadata').longName, '{0}', 'osdisk')]",
      "vmOSDiskSize": 256,
      "vmDataDisks": [],
      "vmDiskEncryptionSetName": "[replace(variables('metadata').shortName, '{0}', 'des')]",
      "vmDiskEncryptionSetKeyExpiry": "[parameters('secretExpiry')]",
      "vmWindowsConfiguration": {
        "provisionVMAgent": true,
        "enableAutomaticUpdates": true,
        "timeZone": "GMT Standard Time"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVault').name]",
      "location": "[variables('keyVault').location]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "premium"
        },
        "enabledForDeployment": false,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "softDeleteRetentionInDays": 14,
        "enablePurgeProtection": true,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccount').name]",
      "location": "[variables('storageAccount').location]",
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2"
      },
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-06-01",
      "name": "[variables('networkSecurityGroup').name]",
      "location": "[variables('networkSecurityGroup').location]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroup').securityRules]"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[variables('virtualNetwork').name]",
      "location": "[variables('virtualNetwork').location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[variables('virtualNetwork').addressPrefixes]"
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('virtualNetworkSubnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroup').name)]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroup').name)]"
      ]
    },
    {
      "copy": {
        "name": "pip",
        "count": "[length(range(0, parameters('virtualMachineCount')))]"
      },
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "name": "[format('{0}{1}', variables('publicIp').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1))]",
      "location": "[variables('publicIp').location]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[format('{0}{1}', if(equals(coalesce(parameters('publicIpDnsLabel'), ''), ''), replace(variables('metadata').shortName, '{0}', 'vm'), parameters('publicIpDnsLabel')), add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1))]"
        }
      },
      "zones": [
        "[add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1)]"
      ]
    },
    {
      "copy": {
        "name": "networkInterfaces",
        "count": "[length(range(0, parameters('virtualMachineCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}{1}', variables('networkInterface').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('publicIp').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1)))]"
              },
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetwork').name)).subnets[0].id]"
              }
            }
          }
        ],
        "enableIPForwarding": false
      },
      "dependsOn": [
        "pip",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/diskEncryptionSets",
      "apiVersion": "2020-12-01",
      "name": "[variables('virtualMachine').vmDiskEncryptionSetName]",
      "location": "[variables('virtualMachine').location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "activeKey": {
          "sourceVault": {
            "id": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVault').name)]"
          },
          "keyUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName), '/')[0], split(format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName), '/')[1])).keyUriWithVersion]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVault').name)]",
        "[resourceId('Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName), '/')[0], split(format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/replace', variables('keyVault').name)]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', variables('virtualMachine').vmDiskEncryptionSetName), '2020-12-01', 'full').identity.principalId]",
            "permissions": {
              "keys": [
                "create",
                "decrypt",
                "delete",
                "encrypt",
                "get",
                "sign",
                "unwrapKey",
                "verify",
                "wrapKey"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/diskEncryptionSets', variables('virtualMachine').vmDiskEncryptionSetName)]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVault').name)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName)]",
      "properties": {
        "attributes": {
          "exp": "[variables('virtualMachine').vmDiskEncryptionSetKeyExpiry]"
        },
        "kty": "RSA",
        "keySize": 2048,
        "keyOps": [
          "decrypt",
          "encrypt",
          "sign",
          "unwrapKey",
          "verify",
          "wrapKey"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVault').name)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').name)]",
      "properties": {
        "value": "[variables('virtualMachine').vmAdminPassword]",
        "attributes": {
          "exp": "[variables('virtualMachine').vmAdminPasswordKeyVaultSecretExpiry]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVault').name)]"
      ]
    },
    {
      "copy": {
        "name": "vm",
        "count": "[length(range(0, parameters('virtualMachineCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}{1}', variables('virtualMachine').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1))]",
      "location": "[variables('virtualMachine').location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('virtualMachine').vmSize]"
        },
        "osProfile": {
          "computerName": "[format('{0}{1}', variables('virtualMachine').vmComputerName, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1))]",
          "adminUsername": "[variables('virtualMachine').vmAdminUsername]",
          "adminPassword": "[variables('virtualMachine').vmAdminPassword]",
          "windowsConfiguration": {
            "provisionVMAgent": "[variables('virtualMachine').vmWindowsConfiguration.provisionVMAgent]",
            "enableAutomaticUpdates": "[variables('virtualMachine').vmWindowsConfiguration.enableAutomaticUpdates]",
            "timeZone": "[variables('virtualMachine').vmWindowsConfiguration.timeZone]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('virtualMachine').vmImagePublisher]",
            "offer": "[variables('virtualMachine').vmImageOffer]",
            "sku": "[variables('virtualMachine').vmImageSku]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[format('{0}{1}', variables('virtualMachine').vmOSDiskName, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1))]",
            "diskSizeGB": "[variables('virtualMachine').vmOSDiskSize]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "diskEncryptionSet": {
                "id": "[resourceId('Microsoft.Compute/diskEncryptionSets', variables('virtualMachine').vmDiskEncryptionSetName)]"
              }
            }
          },
          "dataDisks": "[variables('virtualMachine').vmDataDisks]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', variables('networkInterface').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name)).primaryEndpoints.blob]"
          }
        }
      },
      "zones": [
        "[add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1)]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/diskEncryptionSets', variables('virtualMachine').vmDiskEncryptionSetName)]",
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', split(format('{0}/replace', variables('keyVault').name), '/')[0], split(format('{0}/replace', variables('keyVault').name), '/')[1])]",
        "[resourceId('Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName), '/')[0], split(format('{0}/{1}', variables('keyVault').name, variables('virtualMachine').vmDiskEncryptionSetName), '/')[1])]",
        "networkInterfaces",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount').name)]"
      ]
    },
    {
      "copy": {
        "name": "vmext",
        "count": "[length(range(0, parameters('virtualMachineCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/setup', format('{0}{1}', variables('virtualMachine').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1)))]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[format('Powershell -command \"[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"''\"{0}\"''\")) | Out-File -filepath setup.ps1\" && powershell -ExecutionPolicy Unrestricted -File setup.ps1 {1} {2} {3} {4} {5}', parameters('virtualMachineExtensionCustomScriptEncoded'), parameters('domainName'), parameters('domainNetBiosName'), parameters('addsDsrmPassword'), parameters('virtualMachineAdminUsername'), parameters('virtualMachineAdminPassword'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('virtualMachine').name, add(range(0, parameters('virtualMachineCount'))[copyIndex()], 1)))]"
      ]
    }
  ]
}